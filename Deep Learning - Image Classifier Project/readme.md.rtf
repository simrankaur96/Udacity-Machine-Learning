{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 CambriaMath;\f5\froman\fcharset0 TimesNewRomanPSMT;
\f6\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red35\green46\blue57;\red255\green255\blue255;\red62\green62\blue62;
\red14\green32\blue46;\red245\green245\blue246;\red21\green163\blue221;}
{\*\expandedcolortbl;;\cssrgb\c18039\c23922\c28627;\cssrgb\c100000\c100000\c100000;\cssrgb\c30980\c30980\c30980;
\cssrgb\c5882\c16863\c23922;\cssrgb\c96863\c96863\c97255;\cssrgb\c784\c70196\c89412;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl640\sa100\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Part 2 - Building the command line application\
\pard\pardeftab720\sl540\sa300\partightenfactor0

\f1\b0\fs32 \cf4 \strokec4 Now that you've built and trained a deep neural network on the flower data set, it's time to convert it into an application that others can use. Your application should be a pair of Python scripts that run from the command line. For testing, you should use the checkpoint you saved in the first part.\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \strokec2 Specifications\
\pard\pardeftab720\sl540\sa300\partightenfactor0

\f1\b0\fs32 \cf4 \strokec4 The project submission must include at least two files\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 train.py
\f1\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 \'a0and\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 predict.py
\f1\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 . The first file,\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 train.py
\f1\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 , will train a new network on a dataset and save the model as a checkpoint. The second file,\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 predict.py
\f1\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 , uses a trained network to predict the class for an input image. Feel free to create as many other files as you need. Our suggestion is to create a file just for functions and classes relating to the model and another one for utility functions like loading data and preprocessing images.\'a0
\f0\b Make sure to include all files necessary to run\'a0
\f3\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 train.py
\f0\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 \'a0and\'a0
\f3\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 predict.py
\f0\fs32 \cf4 \cb3 \strokec4 \uc0\u8236 \'a0in your submission.
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\sa300\partightenfactor0
\ls1\ilvl0
\fs24 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Train a new network on a data set with\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 train.py
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl400\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Basic usage:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python train.py data_directory
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Prints out training loss, validation loss, and validation accuracy as the network trains\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Options:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl400\partightenfactor0
\ls1\ilvl2\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Set directory to save checkpoints:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python train.py data_dir --save_dir save_directory
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Choose architecture:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python train.py data_dir --arch "vgg13"
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Set hyperparameters:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python train.py data_dir --learning_rate 0.01 --hidden_units 512 --epochs 20
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use GPU for training:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python train.py data_dir --gpu
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\sa300\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Predict flower name from an image with\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 predict.py
\f1\fs24 \cf4 \cb3 \strokec4 \uc0\u8236 \'a0along with the probability of that name. That is, you'll pass in a single image\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 /path/to/image
\f1\fs24 \cf4 \cb3 \strokec4 \uc0\u8236 \'a0and return the flower name and class probability.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl400\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Basic usage:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python predict.py /path/to/image checkpoint
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Options:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl400\partightenfactor0
\ls1\ilvl2\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Return top\'a0
\f4\fs29 K\cb1 \uc0\u8232 
\f5 \uc0\u8232 
\f6\i \cb3 K
\f1\i0\fs24 \'a0most likely classes:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python predict.py input checkpoint --top_k 3
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use a mapping of categories to real names:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python predict.py input checkpoint --category_names cat_to_name.json
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use GPU for inference:\'a0
\f2\fs28\fsmilli14400 \cf5 \cb6 \strokec5 \uc0\u8237 python predict.py input checkpoint --gpu
\f1\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 \
\pard\pardeftab720\sl540\partightenfactor0

\fs32 \cf4 \cb3 The best way to get the command line input into the scripts is with the\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/argparse.html"}}{\fldrslt 
\f0\b \cf7 \strokec7 argparse module}}\'a0in the standard library. You can also find\'a0{\field{\*\fldinst{HYPERLINK "https://pymotw.com/3/argparse/"}}{\fldrslt 
\f0\b \cf7 \strokec7 a nice tutorial for argparse here}}.\
}